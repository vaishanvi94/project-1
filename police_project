# -*- coding: utf-8 -*-
"""police project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1loFedh_K-wEJDKEVGw_6Fui2eiJa1u_R
"""

import pandas as pd
import sqlite3

#start project
#SecureCheck: A Python-SQL Digital Ledger for Police Post Logs
#from google.colab import drive
#drive.mount('/content/drive')

df=pd.read_csv("/content/drive/MyDrive/traffic_stops.csv")
df.head(10)

#check nulls
print(df.isnull().sum())

#Drop empty coloumns
df.dropna(axis=1,how='all',inplace=True)

df['search_type'].fillna('Unknown',inplace=True)

df.drop_duplicates(inplace=True)

df.rename(columns={'driver_age_raw':'age'},inplace=True)

df.head()

#Create a SQL connection in memory
import sqlite3
conn=sqlite3.connect(":memory:")

#insert cleaned data into SQL
df.to_sql("traffic_stops",conn,index=False,if_exists="replace")

#verify inserted data
import pandas as pd
pd.read_sql("select * from traffic_stops limit 5", conn)

#sample Query -1  Total number of records
query_sample="""select count(*) as totoal_records from traffic_stops"""
pd.read_sql(query_sample, conn)

#sample Query -2    show 5 arrested cases
query_sample="""select * from traffic_stops where is_arrested=1 limit 5"""
pd.read_sql(query_sample, conn)

#MEDIUM QUERY 1       Vehicle-Based
# Top 10 vechicle numbers involved in drug-related stops
query1="""select vehicle_number,count(*) as stop_count from traffic_stops where drugs_related_stop=1  group by vehicle_number order by stop_count desc limit 10"""
pd.read_sql(query1, conn)

#MEDIUM QUERY 2
#Which vehicles were most frequently searched?
query2=""" select vehicle_number,count(*) as search_count from traffic_stops where search_conducted=1  group by vehicle_number order by search_count desc limit 10"""
pd.read_sql(query2, conn)

#Demographic-Based Query -3
#Which driver age group had the highest arrest rate?
# (i)Create age group coloumn
df['age_group'] = pd.cut(df['age'], bins=[0, 18, 25, 35, 50, 100], labels=['0-18', '19-25', '26-35', '36-50', '51+'])

#Re-insert updated data to SQL table
df.to_sql("traffic_stops",conn,index=False,if_exists="replace")

#SQL query to find age gruop with highest arrest rate
query3=""" select age_group,round(sum(is_arrested)*100.0/count(*),2) as arrest_rate from traffic_stops where age_group is not null group by age_group order by arrest_rate desc limit 10"""
pd.read_sql(query3, conn)

#Demographic-Based Query -4
#What is the gender distribution of drivers stopped in each country?
query4=""" select country_name, driver_gender, count(*) as total_stopped from traffic_stops group by country_name, driver_gender order by country_name, driver_gender"""
pd.read_sql(query4, conn)

#Demographic-Based Query -5
#Which race and gender combination has the highest search rate?

query5 = """
SELECT driver_race,
       driver_gender,
       COUNT(*) AS total_stopped,
       SUM(CASE WHEN search_conducted = 1 THEN 1 ELSE 0 END) AS total_searches,
       ROUND(SUM(CASE WHEN search_conducted = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS search_rate
FROM traffic_stops
GROUP BY driver_race, driver_gender
ORDER BY search_rate DESC;
"""
pd.read_sql(query5, conn)

# Time & Duration Based   -QUERY-6
#What time of day sees the most traffic stops?
query6="""SELECT
  CASE
    WHEN CAST(SUBSTR(stop_time, 1, 2) AS INTEGER) BETWEEN 5 AND 11 THEN 'Morning'
    WHEN CAST(SUBSTR(stop_time, 1, 2) AS INTEGER) BETWEEN 12 AND 16 THEN 'Afternoon'
    WHEN CAST(SUBSTR(stop_time, 1, 2) AS INTEGER) BETWEEN 17 AND 20 THEN 'Evening'
    ELSE 'Night'
  END AS time_of_day,
  COUNT(*) AS total_stops
FROM traffic_stops
WHERE stop_time IS NOT NULL
GROUP BY time_of_day
ORDER BY total_stops DESC""";
pd.read_sql(query6, conn)

#Time & Duration Based   -QUERY-7
#What is the average stop duration for different violations?
df['stop_duration'].unique()

query7 = """
SELECT violation,
       AVG(CASE
           WHEN stop_duration = '0-15 Min' THEN 7.5
           WHEN stop_duration = '16-30 Min' THEN 23
           WHEN stop_duration = '30+ Min' THEN 45
           ELSE NULL
       END) AS average_duration_minutes
FROM traffic_stops
GROUP BY violation
ORDER BY average_duration_minutes DESC;
"""
pd.read_sql(query7, conn)

#Time & Duration Based   -QUERY-8
#Are stops during the night more likely to lead to arrests?
query8="""SELECT
  CASE
    WHEN CAST(SUBSTR(stop_time, 1, 2) AS INTEGER) BETWEEN 5 AND 11 THEN 'Morning'
    WHEN CAST(SUBSTR(stop_time, 1, 2) AS INTEGER) BETWEEN 12 AND 16 THEN 'Afternoon'
    WHEN CAST(SUBSTR(stop_time, 1, 2) AS INTEGER) BETWEEN 17 AND 20 THEN 'Evening'
    ELSE 'Night'
  END AS time_of_day,
  ROUND(SUM(CASE WHEN is_arrested = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS arrest_rate
FROM traffic_stops
WHERE stop_time IS NOT NULL
GROUP BY time_of_day
ORDER BY arrest_rate DESC"""
pd.read_sql(query8, conn)

#Violation-Based - QUERY-9
#Which violations are most associated with searches or arrests?
query9 = """
SELECT violation,
       ROUND(SUM(CASE WHEN search_conducted = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS search_rate,
       ROUND(SUM(CASE WHEN is_arrested = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS arrest_rate
FROM traffic_stops
GROUP BY violation
ORDER BY search_rate DESC, arrest_rate DESC;
"""
pd.read_sql(query9, conn)

#Violation-Based - QUERY-10
#Which violations are most common among younger drivers (<25)?
query10 = """
SELECT violation,
       COUNT(*) AS total_stops
FROM traffic_stops
WHERE driver_age < 25
GROUP BY violation
ORDER BY total_stops DESC;
"""
pd.read_sql(query10, conn)

#Violation-Based - QUERY-11
#Is there a violation that rarely results in search or arrest?
query11 = """
SELECT violation,
       ROUND(SUM(CASE WHEN search_conducted = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS search_rate,
       ROUND(SUM(CASE WHEN is_arrested = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS arrest_rate
FROM traffic_stops
GROUP BY violation
ORDER BY search_rate ASC, arrest_rate ASC;
"""
pd.read_sql(query11, conn)

#Location-Based QUERY -12
#Which countries report the highest rate of drug-related stops?
query12 = """
SELECT country_name,
       ROUND(SUM(CASE WHEN drugs_related_stop = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS drug_stop_rate
FROM traffic_stops
GROUP BY country_name
ORDER BY drug_stop_rate DESC;
"""
pd.read_sql(query12, conn)

#Location-Based QUERY -13
#What is the arrest rate by country and violation?
query13="""SELECT country_name,
       violation,
       ROUND(SUM(CASE WHEN is_arrested = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS arrest_rate
       FROM traffic_stops
       GROUP BY country_name, violation
       ORDER BY country_name, arrest_rate DESC;"""
pd.read_sql(query13, conn)

#Location-Based QUERY -14
#Which country has the most stops with search conducted?
query14="""select country_name,count(*) as total_searched_stops from traffic_stops where search_conducted=1 group by country_name
order by total_searched_stops DESC limit 1;
"""
pd.read_sql(query14, conn)

#(Complex):  QUERY-15
#Yearly Breakdown of Stops and Arrests by Country (Using Subquery and Window Functions)
query15= """ SELECT
    strftime('%Y', stop_date) AS stop_year,
    country_name,
    COUNT(*) AS total_stops,
    SUM(CASE WHEN is_arrested = 1 THEN 1 ELSE 0 END) AS total_arrests
FROM
    traffic_stops
GROUP BY
    stop_year,
    country_name
ORDER BY
    stop_year,
    country_name;"""
pd.read_sql(query15, conn)

#(Complex):  QUERY-16
#Driver Violation Trends Based on Age and Race (Join with Subquery)
query16 = """
SELECT
    t1.age_group,
    t1.driver_race,
    t1.violation,
    t1.total_stops,
    t2.total_stops_for_group,
    ROUND(CAST(t1.total_stops AS REAL) * 100 / t2.total_stops_for_group, 2) AS percentage_of_group_stops
FROM
    (SELECT
        age_group,
        driver_race,
        violation,
        COUNT(*) AS total_stops
    FROM
        traffic_stops
    WHERE age_group IS NOT NULL
    GROUP BY
        age_group,
        driver_race,
        violation
    ) AS t1
JOIN
    (SELECT
        age_group,
        driver_race,
        COUNT(*) AS total_stops_for_group
    FROM
        traffic_stops
    WHERE age_group IS NOT NULL
    GROUP BY
        age_group,
        driver_race
    ) AS t2
ON t1.age_group = t2.age_group AND t1.driver_race = t2.driver_race
ORDER BY
    t1.age_group,
    t1.driver_race,
    percentage_of_group_stops DESC;
"""
pd.read_sql(query16, conn)

#(Complex):  QUERY-17
#Time Period Analysis of Stops (Joining with Date Functions) , Number of Stops by Year,Month, Hour of the Day
query17 = """
SELECT
    strftime('%Y', stop_date) AS stop_year,
    strftime('%m', stop_date) AS stop_month,
    SUBSTR(stop_time, 1, 2) AS hour_of_day,
    COUNT(*) AS total_stops
FROM
    traffic_stops
GROUP BY
    stop_year,
    stop_month,
    hour_of_day
ORDER BY
    stop_year,
    stop_month,
    hour_of_day;
"""
pd.read_sql(query17, conn)

#(Complex):  QUERY-18
#Violations with High Search and Arrest Rates (Window Function)
query18=""" select violation,round(AVG(CASE WHEN search_conducted = 1 THEN 1.0 ELSE 0 END) OVER (PARTITION BY violation), 2) AS search_rate,
            round(AVG(CASE WHEN is_arrested = 1 THEN 1.0 ELSE 0 END) OVER (PARTITION BY violation), 2) AS arrest_rate
FROM traffic_stops
GROUP BY violation
ORDER BY search_rate DESC, arrest_rate DESC;"""
pd.read_sql(query18, conn)

#(Complex):  QUERY-19
#Driver Demographics by Country (Age, Gender, and Race)
query19 = """ select country_name,age_group,driver_gender,driver_race,COUNT(*) AS total_stops
FROM traffic_stops
WHERE age_group IS NOT NULL
GROUP BY country_name,age_group,driver_gender,driver_race
ORDER BY country_name,age_group,driver_gender,driver_race;"""
pd.read_sql(query19, conn)

#(Complex):  QUERY-20
#Top 5 Violations with Highest Arrest Rates
query20 = """ select violation,
       ROUND(SUM(CASE WHEN is_arrested = 1 THEN 1.0 ELSE 0 END) * 100.0 / COUNT(*), 2) AS arrest_rate
FROM traffic_stops
GROUP BY violation
ORDER BY arrest_rate desc limit 5;
 """
pd.read_sql(query20, conn)